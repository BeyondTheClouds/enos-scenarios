#+INCLUDE: ../header.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../timeline.css"/>
#+TOC: headlines 3

* Table of Contents                                          :TOC@3:noexport:
- [[#requirements-and-setup][Requirements and Setup]]
  - [[#source-of-the-lab][Source of the Lab]]
  - [[#setup][Setup]]
- [[#heat-introduction][Heat introduction]]
  - [[#introduction][Introduction]]
  - [[#boot-a-vm][Boot a VM]]
  - [[#need-more-flexibility-lets-add-parameters][Need more flexibility: let's add parameters!]]
  - [[#need-our-deployment-to-return-values-lets-use-outputs][Need our deployment to return values: let's use outputs!]]
  - [[#integrate-cloud-init-in-heat][Integrate ~cloud-init~ in Heat]]
  - [[#dynamic-configuration-with-cloud-init-and-parameters][Dynamic configuration with ~cloud-init~ and parameters]]
  - [[#data-dependency-between-resources][Data dependency between resources]]
  - [[#nested-templates][Nested templates]]
  - [[#nested-templates-with-data-dependency][Nested templates with data dependency]]
- [[#automatic-deployment-of-wordpress-with-heat][Automatic deployment of WordPress with Heat]]
- [[#the-quakejs-secret-project][The QuakeJs Secret Project]]
- [[#appendix][Appendix]]
  - [[#reservationyaml][reservation.yaml]]
  - [[#patchgaleracnf][patch/galera.cnf]]
  - [[#circular-dependency-in-heat][Circular dependency in Heat]]
- [[#footnotes][Footnotes]]

* Requirements and Setup
** Source of the Lab
Get the source of lab at [[http://enos.irisa.fr/tp-imt/tp-imt.tar.gz]].
#+BEGIN_SRC bash
$ curl -O http://enos.irisa.fr/tp-imt/tp-imt.tar.gz
$ tar xf tp-imt
$ cd tp-imt/day3/lib
#+END_SRC

** Setup
During the last session we used an OVH account to setup 2 machines,
put them into a private network and then install OpenStack on top of
them (see [[file:~/prog/inria-perso/enos-scenarios/tp-imt/day1/SUBJECT.org::#sec:ovh][Day 2 → Sec 1]]). We got these 2 machines using the web
interface of OVH. However, remember that the /Public Cloud/
infrastructure of OVH is managed by OpenStack itself. To convince
yourself, first activate the new voucher for the current session.
Then, from your project, click on the /OpenStack/ tab. From there, you
can open OVH OpenStack Horizon.

#+CAPTION: Open the Horizon of your OVH Public Cloud project.
[[file:images/ovh-to-horizon.png]]

Connect yourself on OVH OpenStack Horizon, and select region ~GRA3~ in
the region dropdown.

#+CAPTION: Select ~GRA3~ Region from Horizon.
[[file:images/horizon-region-dropdown.png]]

Now you can setup the 2 machines from Horizon. But, if you can do it
from Horizon, then can do it from OpenStack CLI! The only things you
need is an OpenStack RC file that contains all ~OS_*~ environment
variables so you can call OpenStack CLI. You can download the
OpenStack RC file from Horizon. By clicking on your name and then
/OpenStack RC File *v2*/.

#+CAPTION: Download OpenStack RC File from Horizon.
[[file:images/horizon-os-rc-file.png]]

#+BEGIN_NOTE
If you forgot about the OpenStack RC file, read again the "Unleash the
Operator in You" section from the first session (see [[file:../day1/SUBJECT.org::#sec:play-with-os][Day 1 → Sec 3]]).
#+END_NOTE

Downloads that OpenStack RC File, then put it into the lib directory
and rename it ~openrc.sh~. With the OpenStack RC file, we can
automatize all the setup. A script that call proper OpenStack commands
is available online at [[file:lib/setup-tp-imt-ovh.sh]]. In this script,
we reuse the [[file:../day2/lib/os-control.sh]] and
[[file:../day2/lib/os-compute1.sh]] script from the previous session. Here,
we give them to cloud init ({{{ie}}} ~--user-data~) to provision
machines. Note, to execute this script you need to install
[[https://pypi.python.org/pypi/virtualenv][~virtualenv~]]. You may also require [[https://packages.debian.org/stretch/build-essential][~gcc~]], [[https://packages.debian.org/stretch/libffi-dev][~libffi~]] and [[~libssl~][~libssl~]].

#+CAPTION: Script to setup OMH lab on OVH
#+INCLUDE: "lib/setup-tp-imt-ovh.sh" src bash

* Heat introduction
** Introduction

In the previous sessions, we saw how to boot a VM with OpenStack, and execute a
post-installation script using the ~user-data~ mechanism. Such mechanism can
help us to install software but it is not enough to deploy a real Cloud
application. Cloud applications are composed of multiple services that
collaborate to deliver the application. Each service is a charge of an aspect of
the application. This separation of concerns brings flexibility. If a single
service is overloaded, it is common to deploy new units of this service to
balance the load.

Let's take a simple example! WordPress[fn:wordpress] is a very popular content
management system (CMS) written in PHP, which is mainly used as a blog system.
It is composed of two elements: a Web server (Apache) and a database (MySQL).
Apache serves the PHP code of WordPress and stores its information in the
database.

Automation is a very important concept for devops. Imagine you have your own
datacenter and want to exploit it by renting WordPress instances to your
customers. Each time a client rents an instance, you have to manually deploy it.
Wouldn't it more convenient to automate all the operations? :) To that end, we
are going to use an OpenStack project to automate the deployment of
applications: OpenStack Heat.

Heat is the OpenStack orchestrator: it eats templates (called HOT for Heat
Orchestration Template - which are files written in YAML) describing the
OpenStack infrastructure you want to deploy (e.g. vms, networks, storages) as
well as software configurations. Then the Heat engine is in charge of sending
the appropriate requests to OpenStack to deploy the system described in your
template (deployments are called ~stacks~ in Heat). In the following
subsections, we are going to manipulate Heat to understand how to deploy
applications on OpenStack. The following examples are extracted from the heat
templates you can find under the following directory:
~lib/heat_templates/debian/hello_world/~.

** Boot a VM

The simplest HOT template your can declare describes how to boot a VM:

#+INCLUDE: "lib/heat_templates/debian/hello_world/1_boot_vm.yaml" src yaml

As depicted in this example, the different OpenStack resources can be declared
using types. OpenStack resource types are listed in the
documentation[fn:heat_resource_list], browsing this page, you can see that
resources exist for most OpenStack services (e.g. Nova, Neutron, Glance, Cinder,
Heat). Here, we declare a new resource called ~my_vm~ which is defined by the
type ~OS::Nova::Server~ to declare a new virtual machine. A type defines
different properties (some are mandatory, some are optional, see the
documentation for more details). The ~OS::Nova::Server~ properties should be
familiar to you since it is the classical properties Nova requires to boot a VM
(i.e. a name, an image, a flavor, a key name). Once you have written this
template in a file, you can now deploy the stack as following:

+BEGIN_SRC bash
$ openstack stack create -t ./1_boot_vm.yaml hw1
$ openstack stack list
$ openstack stack show hw1
$ watch openstack server list
$ openstack server ssh --login debian --identity ~/admin.pem --address-type provider-net hello_world
$ openstack stack delete hw1
+END_SRC bash

This simple template is enough to run a virtual machine. However it is very
static. In the next subsection, we are going to manipulate parameters to add
flexibility.

** Need more flexibility: let's add parameters!

Templates can be more flexible with parameters. To that end you can:
- declare a set of parameters to provide to your template;
- use the intrinsic function ~get_param~ to map those parameters in your
  resource declarations.
Here's an example:

#+INCLUDE: "lib/heat_templates/debian/hello_world/2_boot_vm_with_params.yaml" src yaml

In this example, we defined two parameters. While the first one related to the
VM flavor has a default value (i.e. ~m1.small~), the second one, corresponding
to the name of the key pair to use, must be provided. To deploy this stack, run
the following command:

+BEGIN_SRC bash
$ openstack stack create -t ./2_boot_vm_with_params.yaml \
    --parameter param_name=hello_params \
    --parameter param_flavor=m1.medium \
    hw2
$ openstack server list
$ openstack stack delete hw2
+END_SRC bash

This command deploys our VM by overriding the default flavor value ~m1.small~ by
~m1.medium~. This can be checked by typing: ~openstack server list~. The
parameter ~param_name~ is required and no default value is provided. As such, if
you try to create a stack without providing this parameter, you would the
following error:

+BEGIN_SRC bash
$ openstack stack create -t ./2_boot_vm_with_params.yaml \
    --parameter param_flavor=m1.medium \
    hw2_error
ERROR: The Parameter (param_name) was not provided.
+END_SRC

Parameters are the inputs of our templates. In the next subsection, we are going
to see how templates can declare outputs, so that our stacks can return a set of
attributes (e.g. the IP address of a deployed VM).

** Need our deployment to return values: let's use outputs!

Templates can declare a set of attributes to return. For instance, you might
need to know the IP address of a resource at run-time. To that end, you can
declare attributes in a new section called ~outputs~:

#+INCLUDE: "lib/heat_templates/debian/hello_world/3_boot_vm_with_output.yaml" src yaml

We declared here an output attribute called ~HOSTIP~ which stores the IP address
of the VM resource. We used here another intrinsic function which is used to get
the IP address from our VM: ~get_attr~. Output attributes can be exploited in
two ways: it can be displayed from the CLI, or it can be fetched by other stack
templates (we will see this last case latter):

+BEGIN_SRC bash
$ openstack stack create -t ./3_boot_vm_with_output.yaml hw3
$ openstack stack output list hw3
$ openstack stack output show hw3 HOSTIP
$ openstack stack delete hw3
+END_SRC

** Integrate ~cloud-init~ in Heat

It is possible to declare a post-installation script in the template with
the user-data property:

#+INCLUDE: "lib/heat_templates/debian/hello_world/4_boot_vm_with_user-data.yaml" src yaml

+BEGIN_SRC bash
$ openstack stack create -t ./4_boot_vm_with_user-data.yaml hw4
$ openstack server ssh --login debian --identity ~/admin.pem --address-type provider-net hw4
$ openstack stack delete hw4
+END_SRC

** Dynamic configuration with ~cloud-init~ and parameters

Let's mix the capabilities we learned from the parameter and cloud-init
templates to write a template with a flexible post-installation script. With
Heat, it is possible to provide a parameter to your user-data at run-time by
using a new function: ~str_replace~!

#+INCLUDE: "lib/heat_templates/debian/hello_world/5_boot_vm_with_user-data2.yaml" src yaml

We used here the new intrinsic function ~str_replace~ to replace strings in our
user-data. In this example, the parameter should be a string containing a set of
packages to install in the VM. You can deploy the stack as follow:

+BEGIN_SRC bash
$ openstack stack create \
    -t ./5_boot_vm_with_user-data2.yaml \
    --parameter PackageName="vim cowsay fortune fortunes" \
   hw5
+END_SRC

This mechanism is crucial to dynamically configure our services during the
deployment. For instance, Service_A might require an IP address in its
configuration file to access Service_B, which runs on another VM. This IP
address is only known at run-time, so it must be represented by a variable
managed in Heat templates. In the next subsections, we are going to study how to
declare such variable, so that Heat resources can exchange information.

** Data dependency between resources

Let's declare a template with two VMs: ~provider~ and ~user~. The idea is to
configure user's static lookup table for hostnames (more information can be
found by typing: ~man hosts~), so that user can target provider from its
hostname rather than from its IP address. To that end, we will use the user-data
mechanism to edit the ~/etc/hosts~ file on user, and map the IP address of
provider with its hostname:

#+INCLUDE: "lib/heat_templates/debian/hello_world/6_boot_vms_with_exchange.yaml" src yaml

In this example, ~user~ requires the IP address of ~provider~ to boot. The Heat
engine is in charge of managing dependencies between resources. Take a look
during the deployment, and check that ~provider~ is deployed prior ~user~:

+BEGIN_SRC bash
$ openstack stack create -t ./6_boot_vms_with_exchange.yaml hw6 && watch openstack server list
$ openstack server ssh --login debian --identity ~/admin.pem --address-type provider-net user
debian@user:~$ ping provider 
debian@user:~$ exit
$ openstack stack delete hw6
+END_SRC

** Nested templates

Heat is able to compose templates to keep human-readable files, using nested
templates. For instance, we can use a first template that describes a virtual
machine, and a second template which deploys multiple VMs by referencing the
first one. Rather than create the first template, we can re-use
~2_boot_vm_with_params.yaml~:

#+INCLUDE: "lib/heat_templates/debian/hello_world/7_nested_template.yaml" src yaml

To compose template, a new resource can be defined by specifying its type as the
target of the desired template. A set of properties can be provided to the
nested template and will be interpreted as parameters.

Nested templates are very convenient to keep your code clean and re-use
templates. We are now reaching the last subsection, where we are going to extend
nested templates with data dependency.

** Nested templates with data dependency

Let's describe the same deployment as in `Data dependency between resources` by
using nested templates. For that we need a new template:

#+INCLUDE: "lib/heat_templates/debian/hello_world/8_nested_template_boot_vm.yaml" src yaml

We can now declare the main template. While it defines three VMs, this template
is easy to read since it points to the template created previously, and
~3_boot_vm_with_output.yaml~:

#+INCLUDE: "lib/heat_templates/debian/hello_world/8_nested_template_exchange.yaml" src yaml

* Automatic deployment of WordPress with Heat

As a DevOps at OMH, you are now in charge of the automation process of deploying
WordPress instances for clients. Congratulation! To that end, you have to use
what you learned from the previous section to design a template that describes a
WordPress application using Heat. We are going to deploy WordPress inside two
VMs: the first one holds the web server, the second one runs the database:

- VM1: Apache + PHP + WordPress code
- VM2: MySQL

It is highly recommended that you create three HOT files:

- sql_vm.yml: containing the description of the VM running MySQL;
- web_vm.yml: containing the description of the VM running the Web server;
- wp_app.yml: containing the description of the WordPress application
  (~sql_vm.yml~ + ~web_vm.yml~ as nested templates).

To help you, we provide the post-installation script for both VMs. You should
read them to understand what they do. Here's the first one is related to the
database:

#+INCLUDE: "lib/mariadb.sh" src yaml

Here's the one for the web server:

#+INCLUDE: "lib/apache2.sh" src yaml

Once it is deployed, you should be able to reach the wordpress service by
typing:

+BEGIN_SRC bash
$ lynx <web_server_ip_address>/wp
+END_SRC

* The QuakeJs Secret Project
See http://www.quakejs.com/

Start the QuakeJs VM
: openstack server create --network provider-net --image debian-9 --flavor m1.small --key-name admin --user-data ./quakejs.sh --wait quakejs-vm
: watch openstack console log show --lines=20 quakejs-vm

#+INCLUDE: "~/prog/inria-perso/enos-scenarios/tp-imt/day3/lib/quakejs.sh" src bash

Make a snapshot:
: nova image-create quakejs-vm quakejs-vm

Start the game CDN
: openstack server ssh --login debian --identity admin.pem --address-type provider-net quakejs-vm
: sudo su
: cd /quakejs
: node bin/web.js --config ./web.json

Expose the CDN on 8080
: sudo iptables -t nat -A PREROUTING --dst $(hostname -I | cut -f1 -d ' ') -p tcp --dport 8080 -j DNAT --to-destination 192.168.0.8:8080

Start the game server
: openstack server create --network provider-net --image quakejs-vm --flavor m1.medium --key-name admin --wait quakejs-server
: openstack server ssh --login debian --identity admin.pem --address-type provider-net quakejs-server
: sudo su
: cd /quakejs
: node build/ioq3ded.js +set fs_game baseq3 +set dedicated 2
: cp /server.cfg /quakejs/base/baseq3/server.cfg
: node build/ioq3ded.js +set fs_game baseq3 +set dedicated 1 +exec server.cfg

Expose the Game server on 27960
: sudo iptables -t nat -A PREROUTING --dst $(hostname -I | cut -f1 -d ' ') -p tcp -m tcp --dport 27960 -j DNAT --to-destination 192.168.0.10:27960
: sudo iptables -t nat -A PREROUTING --dst $(hostname -I | cut -f1 -d ' ') -p udp -m udp --dport 27960 -j DNAT --to-destination 192.168.0.10:27960

Perform a live migration of the game server
: openstack server migrate --live os-compute2 quakejs-server

* Appendix
** reservation.yaml
#+INCLUDE: "lib/reservation.yml" src bash

** patch/galera.cnf
#+INCLUDE: "lib/patch/galera.cnf" src bash

** Circular dependency in Heat

The Heat engine is in charge of managing dependencies between the declared
resource. However, it is not able to deploy a stack with circular dependencies.
The following example leads to such a situation:

#+INCLUDE: "lib/heat_templates/debian/hello_world/9_circular_dependency.yaml" src yaml

* Footnotes

[fn:ovh] https://www.ovh.com/fr/cloud/
[fn:ovh-vrack] https://www.ovh.com/manager/cloud/index.html#/vrack
[fn:ovh-vrack-doc] https://docs.ovh.com/fr/public-cloud/utiliser-le-vrack-et-les-reseaux-prives-avec-les-instances-public-cloud/https://docs.ovh.com/fr/public-cloud/utiliser-le-vrack-et-les-reseaux-prives-avec-les-instances-public-cloud/
[fn:cloudinit] https://cloud-init.io/
[fn:cloudinit_modules] http://cloudinit.readthedocs.io/en/latest/topics/modules.html
[fn:wordpress] https://wordpress.org/
[fn:devstack] https://docs.openstack.org/devstack/latest/
[fn:puppet] https://docs.openstack.org/puppet-openstack-guide/latest/
[fn:kolla-ansible] https://docs.openstack.org/developer/kolla-ansible/
[fn:enos-paper] https://hal.inria.fr/hal-01415522v2
[fn:enos-code] https://github.com/BeyondTheClouds/enos
[fn:virtualbox-downloads] https://www.virtualbox.org/wiki/Downloads
[fn:vagrant-downloads] https://www.vagrantup.com/downloads.html
[fn:enos-box] http://enos.irisa.fr/vagrant-box/polytech.box
[fn:enos-provider] https://enos.readthedocs.io/en/latest/provider.html
[fn:enos-g5k-provider] https://enos.readthedocs.io/en/latest/provider/grid5000.html
[fn:enos-vagrant-provider] https://enos.readthedocs.io/en/latest/provider/vagrant.html
[fn:vagrantfile] https://www.vagrantup.com/docs/vagrantfile/index.html
[fn:cadvisor] https://github.com/google/cadvisor
[fn:collectd] https://collectd.org/
[fn:grafana] https://grafana.com/
[fn:rally] https://rally.readthedocs.io/en/latest/
[fn:shaker] https://pyshaker.readthedocs.io/en/latest/
[fn:rally-scenarios] https://github.com/openstack/rally/tree/master/rally/plugins/openstack/scenarios
[fn:shaker-scenarios] https://github.com/openstack/shaker/tree/master/shaker/scenarios/openstack
[fn:dvr] https://wiki.openstack.org/wiki/Neutron/DVR
[fn:wordpress] https://wordpress.org/
[fn:heat] https://wiki.openstack.org/wiki/Heat
[fn:heat_resource_list] https://docs.openstack.org/heat/pike/template_guide/openstack.html

# Local Variables:
# org-html-postamble: "<p class=\"author\">Author: %a</p>
# <p class=\"email\">Email: %e</p>
# <p class=\"github\">Find a typo, wanna make a proposition:
#  <a href=\"https://github.com/BeyondTheClouds/enos-scenarios/issues/new?title=tp-imt (Day 3)\">open an issue</a></p>
# <p class=\"date\">Last modification: %C</p>
# <p class=\"license\">This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.</p>
# <p class=\"creator\">%c – theme by
#  <a href=\"http://gongzhitaao.org/orgcss\">http://gongzhitaao.org/orgcss</a></p>"
# End:

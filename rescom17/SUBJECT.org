# -*- mode: org -*-

#+TITLE: Measure and Understand Specific
#+TITLE: Configurations of OpenStack with EnOS
#+SUBTITLE: RESCOM 2017, 2017-06-20
#+AUTHOR: Ronan-Alexandre Cherrueau, Dimitri Pertin, Matthieu Simonin
#+EMAIL: {firstname.lastname}@inria.fr

#+OPTIONS: ':t
#+OPTIONS: email:t

# http://gongzhitaao.org/orgcss/

* EnOS in a Nutshell
OpenStack has become the de-facto solution to operate compute, network
and storage resources in public and private clouds. However,
developers and scientists are facing challenges when it comes to
deploy and benchmark such a complex software stack. This lab aims at
exploring EnOS[fn:enos-paper][fn:enos-code], a holistic framework
leveraging containers to conduct easy and reproducible evaluations of
different OpenStack configurations. In particular, EnOS helps you in
deploying real OpenStack infrastructure, stressing it and get
feedback.

In this lab, we are going to:
- deploy and Configure OpenStack using EnOS,
- operate this OpenStack instance to manage IaaS resources (e.g. boot
  VMs),
- run some benchmarks to evaluate the deployment,
- monitor metrics and visualize them through Grafana,

* Requirements and Setup (TO BE DONE BEFORE THE LAB)

** Environment

To follow the lab you'll need :

- VirtualBox 5.1.22 [fn:virtualbox-downloads]
- Vagrant 1.9.5 or upper[fn:vagrant-downloads]
- Rescom17 Vagrant box[fn:enos-box] (contains EnOS with all its
  dependencies)

The lab makes use of a pre-installed virtual machine (lab vm) where Enos is installed.
Enos will then deploy OpenStack inside the lab-vm. 

The following depicts the status of the different components in play during the lab.

#+BEGIN_SRC
+---------------------------------------+
|        host machine (your laptop)     |
|                                       |
|                                       |
|   +---------------------------+       |
|   |   lab-vm machine (vagrant)|       |
|   |     /opt/enos <- - - -  - - - - - - - - - - - EnOS files
|   |                           |       |
|   |  * docker container 1 +   |       |
|   |  * docker container 2 +   |       |
|   |  * ...                +- - - - - - - - - - - Docker container launched by Enos (Openstack service / third party service)
|   |  * docker container n +   |       |
|   |                           |       |
|   +---------------------------+       |
+---------------------------------------+
#+END_SRC

#+BEGIN_NOTE
In a normal use Enos will be probably installed in your local machine directly. 
Enos will also be able to deploy OpenStack on a dedicated infrastructure (instead of a single VM)
#+END_NOTE


** Setup

*** Get the base box

Download the Rescom17 Vagrant box[fn:enos-box] in your working
directory. 

: host-$) mkdir rescom17-enos
: host-$) cd rescom17-enos
: host:rescom17-enos/-$) wget http://enos.irisa.fr/vagrant-box/rescom17.box

#+BEGIN_NOTE
The VM contains EnOS together with all resources needed by
EnOS to run OpenStack. The box is relatively huge (4GB), but contains
everything you need to run EnOS almost offline.
#+END_NOTE

While the box is downloading, you can go to the next section.

*** Prepare the lab VM

Create a ~Vagrantfile~ as the following (substitute <editor> with your favorite editor): 

: host:rescom17-enos/-$) <editor> Vagrantfile

#+BEGIN_SRC ruby
# rescom17-enos/Vagrantfile content
Vagrant.configure("2") do |config|
  # Location of the VM image
  config.vm.box = "file://./rescom17.box"

  # Network configuration
  config.vm.hostname = "enos-node"
  # the lab vm is started with 2 extra network interfaces with
  # the specified ip addresses
  config.vm.network :private_network, ip: "192.168.142.127"
  config.vm.network :private_network, ip: "192.168.143.127"

  # Resource configuration
  config.vm.provider "virtualbox" do |vb|
    vb.cpus = 4
    vb.memory = 6144
  end
end
#+END_SRC

#+BEGIN_NOTE
To get more information about that ~Vagranfile~ and its syntax, you
can refer to the official documentation[fn:vagrantfile].
#+END_NOTE

*** Start the lab VM

Start the VM :
: host:rescom17-enos/-$) vagrant up

SSH into the lab VM :
: host:rescom17-enos/-$) vagrant ssh

** Validate the setup

*** Enos installation

The EnOS tool is already installed in ~/opt/enos~. To be sure that
everything is setup correctly, you can go into the EnOS directory and
display the help message.

#+BEGIN_EXAMPLE
$ vagrant@enos-node:-$) cd /opt/enos
$ vagrant@enos-node:/opt/enos-$) enos help
Enos: Monitor and test your OpenStack.

usage: enos <command> [<args> ...] [-e ENV|--env=ENV]
            [-h|--help] [-v|--version] [-s|--silent|--vv]

...

Commands:
  up             Get resources and install the docker registry.
  os             Run kolla and install OpenStack.
  init           Initialise OpenStack with the bare necessities.
  bench          Run rally on this OpenStack.
  backup         Backup the environment
  ssh-tunnel     Print configuration for port forwarding with horizon.
  tc             Enforce network constraints
  info           Show information of the actual deployment.
  destroy        Destroy the deployment and optionally the related resources.
  deploy         Shortcut for enos up, then enos os and enos config.

See 'enos <command> --help' for more information on a specific
command.
#+END_EXAMPLE

*** Docker installation

You can check that all the docker images are pre-installed : 

$ vagrant@enos-node:/opt/enos-$) sudo docker images

*TODO put output*

* Deploy OpenStack using EnOS
EnOS helps you to test and measure /specific configurations/ of
OpenStack. A configuration states the OpenStack resources you want to
measure together with there topology. A configuration could say,
"/Deploy a basic OpenStack on a single node/", or "/Put OpenStack
control services on ClusterA and compute services on ClusterB/", but
also "/Deploy each OpenStack services on a dedicated node/ /and add
WAN network latency between them/". So that EnOS can deploy such
OpenStack over your testbed and run performance analysis. This section
shows you, how to define a configuration and deploy OpenStack over
your testbed.

** Describe and customize the topology of your OpenStack
The OpenStack configuration is described in a file called
~reservation.yaml~ under a key named ~resources~. For instance,
configuration in listing [[lst:basic]] shows you how easy it is, with
EnOS, to target a basic OpenStack deployment. It says:

#+BEGIN_QUOTE
On my ~clusterA~, I want ~1~ node for control services and ~1~ node
for network services. And on my ~clusterB~, I want ~50~ computes
nodes.
#+END_QUOTE

Then, scaling horizontally is as simple as increasing the number next
to the service name. You can also tune your topology and put some
services on a dedicated node by explicitly giving resources to it. For
instance, configuration in listing [[lst:advanced]] tells EnOS to pull out
nova conductor from control node and start it on ~5~ dedicated nodes.

#+ATTR_HTML: style="float:left;"
#+CAPTION: EnOS Configuration for
#+CAPTION: Basic OpenStack Deployment
#+NAME: lst:basic
#+BEGIN_SRC yaml
resources:
  clusterA:
    control: 1
    network: 1
  clusterB:
    compute: 50
#+END_SRC

#+CAPTION: EnOS Configuration for
#+CAPTION: Advanced OpenStack Deployment
#+NAME: lst:advanced
#+BEGIN_SRC yaml
resources:
  clusterA:
    control: 1
    network: 1
    nova-conductor: 5
  clusterB:
    compute: 50
#+END_SRC

EnOS comes with ~providers~ which are connectors to deploy your
OpenStack on different testbeds. The actual implementation gives
providers for Static resources, Vagrant, Grid'5000 and OpenStack
itself. Such providers are used to provision and configure the
machines on which EnOS deploys the OpenStack services. For instance,
the Grid'5000 provider can be used by EnOS to reserve and deploy
machines on different clusters of Grid'5000. In the same manner, the
Vagrant provider can be used by EnOS to start VM on your current
machine. Please, refer to EnOS documentation[fn:enos-g5k-provider] for
further information.

For the sake of this lab (since everybody does not have a Grid'5000
account, and the Internet connection may be slow) we will install all
OpenStack services in our current working space using the static
provider. Take a look at the current ~/opt/enos/reservation.yaml~ and
see that it achieves a basic OpenStack deployment. Based on that
configuration, you will be able to ask EnOS to deploy OpenStack.

** Deploy OpenStack
EnOS manages all the aspect of an OpenStack deployment by calling
~enos deploy~. Concretely the ~deploy~ phase do:

#+BEGIN_SRC bash
$ cd /opt/enos
$ enos deploy -f reservation.yaml
#+END_SRC

The deployment process starts each OpenStack services (e.g. Keystone,
Nova, Neutron, ...) inside a dedicated Docker container. These
containers can be observed from another terminal of your VM with:
: $ sudo docker ps

** Play with OpenStack
The last service deployed is the OpenStack dashboard (Horizon). Once
the deployment process is finished, Horizon is reachable from the web
browser of your host machine http://192.168.142.127 with the following
credentials:
- login: ~admin~
- password: ~demo~

From here you can reach ~Project > Compute > Instances > Launch
Instance~ and boot a virtual machine given the following information:
- a name,
- an image (i.e. here a CirrOS image is provided),
- a flavor to limit the resources of your instance (e.g. I recommend
  tiny),
- and a network setting (e.g. private).

You should select options by clicking on the arrow on the right of
each possibility. When the configuration is OK, the ~Launch Instance~
button should be enabled, you should see the instance in the ~Active~
state in less than a minute.

Now, you have several option to connect to your freshly deployed VM.
For instance by clicking on its name, Horizon provides a virtual
console under the tab ~Console~. Use the following credentials to
access the VM:
- login: ~cirros~
- password: ~cubswin:)~

While Horizon is helpful to discover OpenStack features, this is not
how a true operator administrates OpenStack. A true operator prefers
command line interface.

*** Unleash the Operator in You
OpenStack provides a command line interface to operate your Cloud. But
before using it, you need first set your environment with OpenStack
credentials, so that the command line won't bother you by requiring
credentials each time. EnOS saves credentials in
~/opt/enos/current/admin-openrc~. You can put them into you
environment with:
: $ source /opt/enos/current/admin-openrc

You can then check that your environment is correctly set by:
: $ env|grep OS_

All operation to manage OpenStack are done through one single command
line, called ~openstack~. Doing an ~openstack --help~ displays the
really long list of possibilities provided by this command. Next gives
you a selection of most often used commands to operate your Cloud:
- List images :: ~openstack image list~
- List flavors :: ~openstack flavor list~
- List networks :: ~openstack network list~
- List all your Compute :: ~openstack hypervisor list~
- List all your VM :: ~openstack server list~
- Get details on a specific VM :: ~openstack server show <vm-name>~
- Start a new VM :: ~openstack server create --image <image-name> --flavor <flavor-name> --nic net-id=<net-id> <vm-name>~

Using all this command, you can start a new tiny cirros VM called
~my-vm~ with the following command:
#+BEGIN_SRC bash
$ openstack server create\
  --image cirros.uec\
  --flavor m1.tiny\
  --nic net-id=$(openstack network show private --column id --format value)\
  my-vm
#+END_SRC

With this command, the VM boot with a private IP. Private IP are used
for communication between VMs, meaning you cannot ping your VM from
the host machine. You have to manually affect a public IP to your
machine if you want it pingable from the host.

#+BEGIN_SRC bash
$ openstack server add floating ip\
  my-vm\
  $(openstack floating ip create  public -c floating_ip_address -f value)
#+END_SRC

Then, ask for the status of your VM with:
: $ openstack server show my-vm -c status -c addresses

When the state is ~ACTIVE~ wait one minute or two, the time for the VM
to boot. Then you can ping it on its public IP and SSH on it:
: $ ping 192.168.143.<floating-ip>
: $ ssh -l cirros 192.168.143.<floating-ip>

* Measure OpenStack Behavior using EnOS
EnOS not only deploys OpenStack according to your configuration, but
also instruments it with a /monitoring stack/. The monitoring stack
gets performance characteristics of the running services and helps you
in understanding the behavior of your OpenStack.

Activating the monitoring stack is as simple as setting the
~enable_monitoring~ to ~yes~ in your ~reservation.yaml~. This key
tells EnOS to deploy two monitoring system. First,
cAdvisor[fn:cadvisor], a tool to collect resource usage of running
containers. Using cAdvisor, EnOS gives information about the
CPU/RAM/Network consumption per cluster/node/service. Second,
Collectd[fn:collectd], a tool to collect performance data of specific
application. Using Collectd, EnOS gives, for instance, the number of
updates that have been performed on the Nova database.

The rest of this section, first shows you how to visualize information
provided by cAdvisor and Collectd. Then it goes through tools to
stress OpenStack in order to collect interesting information.

** Visualize OpenStack Behavior
The common tool to visualize information provided by cAdvisor (and


Grafana, which allows you to monitor control plane services, is
reachable from the web browser of your host machine
http://192.168.142.127:3000 with the following credentials:
- login: ~admin~
- password: ~admin~

The dashboard of Grafana is highly customizable. For the sake of
simplicity, we propose to use our configuration file available at: ...

** Controlplane Benchmarking with Rally

** Dataplane Benchmarking with Shaker

** Integration with a custom benchmarking suite

* Add Traffic Shaping (optional - non static only)
** Define Network Constraints (latency + packet loss)

** Run Dataplane Benchmarks with and without DVR

* Footnotes

[fn:enos-paper] https://hal.inria.fr/hal-01415522v2
[fn:enos-code] https://github.com/BeyondTheClouds/enos
[fn:virtualbox-downloads] https://www.virtualbox.org/wiki/Downloads
[fn:vagrant-downloads] https://www.vagrantup.com/downloads.html
[fn:enos-box] http://enos.irisa.fr/vagrant-box/rescom17.box
[fn:enos-g5k-provider] https://enos.readthedocs.io/en/latest/provider/grid5000.html
[fn:vagrantfile] https://www.vagrantup.com/docs/vagrantfile/index.html
[fn:cadvisor] https://github.com/google/cadvisor
[fn:collectd] https://collectd.org/
